import java.io.*;
import java.lang.reflect.Array;
import java.util.*;

public class 네트워크연결 {

    static int[] parent;
    static PriorityQueue<Edge> pq = new PriorityQueue<>();

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        // 도현이는 컴퓨터와 컴퓨터를 모두 연결하는 네트워크 구축

        int n = Integer.parseInt(br.readLine());

        parent = new int[n+1];

        for (int i = 1; i <=n ; i++){
            parent[i] = i;
        }

        int m = Integer.parseInt(br.readLine());

        StringTokenizer st;
        for (int i = 0; i < m; i++){
            st = new StringTokenizer(br.readLine());

            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());
            int c = Integer.parseInt(st.nextToken());

            pq.offer(new Edge(a,b,c));
        }


        int price = 0;
        while (!pq.isEmpty()){
            Edge edge = pq.poll();

            if(find_parent(edge.start) != find_parent(edge.end)){
                union(edge.start, edge.end);
                price+=edge.cost;
            }
        }

        bw.write(price+"");

        bw.flush();
        bw.close();
        br.close();
    }

    public static void union(int a, int b){
        a = find_parent(a);
        b = find_parent(b);

        if (a < b){
            parent[b] = a;
        }
        else {
            parent[a] = b;
        }
    }

    public static int find_parent(int num){
        if (num == parent[num]){
            return num;
        }

        return parent[num] = find_parent(parent[num]);
    }

}

class Edge implements Comparable<Edge>{
    int start;
    int end;
    int cost;

    public Edge(int start, int end, int cost){
        this.start = start;
        this.end = end;
        this.cost = cost;
    }

    public int compareTo(Edge e){
        return this.cost - e.cost;
    }
}